// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String?
  avatar    String?
  phone     String?
  location  String?
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  ownedWorkspaces Workspace[]      @relation("WorkspaceOwner")
  workspaces      WorkspaceMember[]
  createdTasks    Task[]           @relation("TaskCreator")
  assignedTasks   Task[]           @relation("TaskAssignee")
  comments        Comment[]
  habits          Habit[]
  habitEntries    HabitEntry[]
  notifications   Notification[]
  projectMemberships ProjectMember[]
  projectMessages    ProjectMessage[]
  projectSuggestions ProjectSuggestion[]
  invitationsSent    Invitation[]     @relation("InvitedByUser")
  passwordResets     PasswordReset[]

  @@map("users")
}

model Workspace {
  id          String   @id @default(cuid())
  name        String
  description String?
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  owner   User            @relation("WorkspaceOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members WorkspaceMember[]
  projects Project[]
  tags    Tag[]
  invitations Invitation[]

  @@map("workspaces")
}

model WorkspaceMember {
  id         String      @id @default(cuid())
  workspaceId String
  userId     String
  role       Role        @default(MEMBER)
  joinedAt   DateTime    @default(now())

  // Relations
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, userId])
  @@map("workspace_members")
}

model Project {
  id          String  @id @default(cuid())
  name        String
  description String?
  color       String  @default("#3b82f6")
  workspaceId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  tasks     Task[]
  members   ProjectMember[]
  messages  ProjectMessage[]
  suggestions ProjectSuggestion[]
  invitations Invitation[]

  @@map("projects")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Priority   @default(MEDIUM)
  dueDate     DateTime?
  projectId   String?
  assignedTo  String?
  parent_id   String?
  created_by  String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  project    Project?    @relation(fields: [projectId], references: [id], onDelete: SetNull)
  assignee   User?       @relation("TaskAssignee", fields: [assignedTo], references: [id], onDelete: SetNull)
  creator    User        @relation("TaskCreator", fields: [created_by], references: [id], onDelete: Cascade)
  parent     Task?       @relation("TaskHierarchy", fields: [parent_id], references: [id], onDelete: Cascade)
  children   Task[]      @relation("TaskHierarchy")
  tags       TaskTag[]
  comments   Comment[]

  @@map("tasks")
}

model Tag {
  id          String  @id @default(cuid())
  name        String
  color       String  @default("#6b7280")
  workspaceId String
  createdAt   DateTime @default(now())

  // Relations
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  tasks     TaskTag[]

  @@unique([workspaceId, name])
  @@map("tags")
}

model TaskTag {
  id     String @id @default(cuid())
  taskId String
  tagId  String

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([taskId, tagId])
  @@map("task_tags")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  taskId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Habit {
  id          String       @id @default(cuid())
  name        String
  description String?
  frequency   HabitFrequency @default(DAILY)
  userId      String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  entries     HabitEntry[]

  @@map("habits")
}

model HabitEntry {
  id           String   @id @default(cuid())
  habitId      String
  userId       String
  completedAt  DateTime @default(now())
  notes        String?

  // Relations
  habit Habit @relation(fields: [habitId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([habitId, completedAt])
  @@map("habit_entries")
}

model Notification {
  id        String   @id @default(cuid())
  type      String
  title     String
  message   String
  userId    String
  read      Boolean  @default(false)
  data      String?
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Invitation {
  id              String   @id @default(cuid())
  email           String
  role            Role     @default(MEMBER)
  token           String   @unique
  status          InviteStatus @default(PENDING)
  workspaceId     String
  projectId       String?
  invitedByUserId String
  createdAt       DateTime @default(now())
  acceptedAt      DateTime?

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  project   Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  inviter   User      @relation("InvitedByUser", fields: [invitedByUserId], references: [id], onDelete: Cascade)

  @@index([email])
  @@map("invitations")
}

model PasswordReset {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("password_resets")
}

enum InviteStatus {
  PENDING
  ACCEPTED
  CANCELED
}

model ProjectMember {
  id        String @id @default(cuid())
  projectId String
  userId    String
  role      Role   @default(MEMBER)
  joinedAt  DateTime @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_members")
}

model ProjectMessage {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  content   String
  createdAt DateTime @default(now())
  attachments String?

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("project_messages")
}

model ProjectSuggestion {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  content   String
  status    SuggestionStatus @default(OPEN)
  createdAt DateTime @default(now())
  resolvedAt DateTime?

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("project_suggestions")
}

enum SuggestionStatus {
  OPEN
  ACCEPTED
  REJECTED
}

enum Role {
  ADMIN
  MEMBER
  VIEWER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
  ARCHIVED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum HabitFrequency {
  DAILY
  WEEKLY
  MONTHLY
}